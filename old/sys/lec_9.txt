vim :
    行首行尾跳转：
        ^:跳转到行首
        0:跳转到行首
        $:跳转到行尾巴
    行间移动：
        #G:跳转到#行
        G:最后一行
        1G,gg:第一行
    句间移动：
        (
        ) 
    段落间移动：
        {
        }
编辑命令：
    字符编辑：
        x：删除光标处的字符
        xp:交换光标所在处和后面的字符

    替换命令(r,replace)
        r:替换光标所在处的字符

    删除命令：
        d:删除命令，可结合光标跳转字符，实现范围删除
        d$：
        d0
        d^
        dw   
        de 
        db
        #COMMAND
        dd
        #COMMAND:实现多行删除
        D:删除后留下空白行
    
    粘贴命令(p,put,paste)
        p:缓冲区缓存的是一整行，则 粘贴在当前行的下方：否则，则粘贴至当前光标所在处的后面
        P:缓冲区缓存的是一整行，则 粘贴在当前行的上方：否则，则粘贴至当前光标所在处的前面

    复制命令(y,yank)
        y:复制，工作行为与d相似
            y$
            y0
            y^
            ye
            yw
            yb
                #COMMAND
            yy 复制行
                #yy
     改变命令： (c,change)
        c:修改  
            编辑模式--》输入模式
            c$:
            c^
            c0
            cb
            ce
            cw 
                #COMMAND
            cc:删除并输入新内容 
            #cc

可视化模式:
    v:按字符选定
    V:按行选定
    Note:经常结合编辑命令：
        d,c,y
撤销此前的编辑：    
    u(undo)：撤销此前的操作 
        #u
撤销此前的撤销操作
    ctrl+r
重复前一个操作：
    .

翻屏操作：
    ctrl+f:向文件尾部翻一屏
    ctrl+b:向文件首部翻一屏
    ctrl+d:向文件尾部翻半屏 
    ctrl+u:向文件首部翻半屏 
vimtutor 

vim中的末行模式：
    内建的命令行接口
    (1)地址定界限
        :start_pos,end_pos
            #： 具体表示第#行
            #,#:从左侧#表示行起，到右侧#行
            #,+#:从左侧行起始，加上右侧#行
            .:当前行
            $:最后一行
            %=1,$:全文
            /pattern1/,/pattern2/:
            从第一次被pattern1模式匹配的行开始，一直到第一次被pattern2匹配到的行结束：
            #,/pattern/
            /pattern/,$
        使用方式：
            d
            y
            w /path/to/somefile 将范围内的行另存到指定文件中
            r /path/from/somefile 在指定位置插入指定文件中的所有内容
    (2)搜索
        /pattern：从当前光标所在处向文件尾部查找
        ?pattern：从当前光标所在处向文件首部查找
            n:与命令同方向
            N:与命令反方向
            
    (3)查找并替换
        s:在末行模式下完成查找替换操作
            s/要查找的内容/替换为的内容/修饰符号
                要查找的内容：可使用模式
                要替换为的内容：不能使用模式，可以使用\1,\2,...等后向引用符号:还可以使用“&”引用前面查找时找到的整个内容：
                修饰符号：
                    i:忽略大小写
                    g:全局替换：默认情况下，每行只替换第一次出现：
                &直接引用前面的模式
        查找替换中的分隔符/可以替换为其他字符，例如：
            s@@
            s##
复制/etc/grub2.cfg至/tmp/目录，用查找命令删除/tmp/grub2.cfg文件中的行首空白字符
:%s/^[[:space:]]\+//g
复制/etc/rc.d/init.d/functions文件到目录tmp下，用查找替换命令为/tmp/functions的每行开头为空白的行的行首添加一个#号
:%s/^[[:space:]]/#$/g   



    多文件模式：
        vim file1 file2 file3 ...
            :next 下一个
            :prev 前一个    
            :first 
            :last

            :wall
            :qall

    窗口分割模式
    vim -o|-O FILE1 FILE2 ...
        -o:水平分割
        -O:垂直分割

        在窗口间切换：
            ctrl+w arrow 
    单文件窗口分割：
        ctrl+w,s:split 
        ctrl+w,v；vertical 
    定制vim的配置文件
        配置文件：  
            全局： /etc/vimrc
            个人：~/.vimrc
            
        末行：当前vim进程有效   
        (1)行号：
            显示::set nu 
            取消显示::set nonu 
        (2)括号匹配 
            匹配：set showmatch,set sm
            取消:set nosm 
        (3)自动缩进
            启用：set autoindent,set ai
            禁用：set noai 
        (4)高亮搜索
            启动：set hlsearch 
            禁用：
        (5)语法高亮：
            启用：syntax on 
            禁用：syntax off 
        (6)忽略字符大小写
            启动：set ic
            不忽略：set noic
        :help 关键字
复制/etc/rc.d/init.d/functions 文件至/tmp目录，替换/tmp/functions文件中的/etc/sysconfig/init为/var/log；
删除/tmp/functions文件中所有以#开头，而且后面至少有一个空白字符的行首的#号 


bash条件测试：
    测试方式：
         test expr 
	    [ EXPRESSION ]
	    [[ expression ]]
    测试表达式的类别：
        数值比较
        字符串测试
        文件测试
            存在性测试
                -a FILE
                -e FILE:文件存在性测试，存在为真返回0，否则为假返回1
            存在性测试及类别测试
                -b FILE:存在且为块设备文件  
                -c FILE :是否存在并且为字符文件
                -d FILE:是否存在而且为目录文件 
                -f FILE:是否存在并且为普通文件
                -p FILE:是否存在并且为命名管道 (|为匿名管道)
                -S FILE
                -L FILE 或者 -h 是否存在并且为符号链接文件
            文件权限测试;
                取决于当前用户
                -r FILE:是否存在且可读
                -w FILE:是否存在且可写
                -x FILE:是否存在且可执行
                    
            文件特殊权限测试：
                -g FILE:存在并且设置为set-group-id
                -u FILE:存在并且设置为set-user-id
                -k FILE:存在并且拥有sticky权限
            文件大小测试：
                -s FILE:是否存在且非空
            文件是否打开：
                -t fd:fd表示文件描述符号是否已经打开并且与某终端相关


                -N FILE:文件自从上次被读取
                -O FILE:当前用户是否为文件的属主
                -G FILE:当前用户是否为文件的属组    
            双目测试：
                FILE1 -ef FILE2:FILE1与FILE2是否指向同一个设备上相同的inode
                FILE1 -nt FILE2:FILE1是否新于FILE2
                FILE1 -ot FILE2:FILE1是否旧于FILE2
    组合测试条件；
        逻辑运算：
            第一种方式：
                COMMAND1 && COMMAND2    
                COMMAND1 || COMMAD2
                !COMMAND

                [ -e FILE ] && [ -r FILE ]
            第二种方式：
                命令连接
                与运算EXPRESSION1 -a EXPRESSION2
                或运算EXPRESSION1 -o EXPRESSION2
                      !EXPRESSION 

        #[ -z "$hostName" -o "$hostName"=="localhost.hostdomain"] && hostname www.magedu.com
        #[-f /bin/cat -o  -x /bin/cat ]&&cat /etc/fstab  


总结：  
    vim编辑器，条件测试之文件测试，组合测试条件

    vim:
        编辑模式,输入模式，末行模式，可视化模式
        跳转：h,j,k,l,w,b,e,),(,{,},G,^,0,$
        编辑：x,r,c,d,y,p,u,ctrl+r
        查找：/,?,n,N
        查找替换

            查找可以使用模式，而替换不可以用模式
            s///
                g:
                i:
        末行界定：
            #
            m,n
            m,+#
            .
            $
            /pat1/
            /pat1/,/pat/
            %   

        文件测试：  
            单目:-e,-f,-d,-b,-c,-L,-p,-S,-r,-w,-x,-s,
            双目:-nt,-ot 
        组合测试条件:-a,-o,!





	





