iptables:包过滤型防火墙
    firewall:防火墙，隔离工具:工作于主机或者网络的边缘,对于进出本主机或网络的报文根据事先定义的检查规则匹配检测，对于能够被规则所匹配到的报文作出相应处理：
        主机防火墙
        网络防火墙

    ipfw

    ipchains

    iptables/netfilter:
        framework:netfilter 
            hooks function
        rule utils:iptables
    功能：
        filter:过滤，防火墙:
        nat:network address translation,网络地址转换;
        mangle:拆解报文，作出修改，封装报文
        raw:关闭nat表上启用的连接追踪机制：
        对于繁忙的前端服务器，连接追踪是不可以开启
    链(内置)
        PREROUTING:
        INPUT:  
        FORWARD:
        OUTPUT:
        POSTROUTING:


    报文流向

    流入:PREROUTING --> INPUT
    流出:OUTPUT --> POSTROUTING 
    转发:PREROUTING --> FORWARD --> POSTROUTING

    各功能的分别实现位置：
        filter: INPUT ,FORWARD ,OUTPUT
        nat: PREROUTING(DNAT),OUTPUT ,POSTROUTING(SNAT)
        mangle:PREROUTING ,INPUT ,FORWARD,OUTPUT ,POSTROUTING 
        raw:OUTPUT,PREROUTING 

    路由发生的时刻
        报文进如入本机后：
            判断目标主机：
        报文发出之前：
            判断经由哪个接口往下一跳


    iptables:四表五链
        添加规则时候的考量点：
            (1)要实现那种功能，判断添加在那张表上
            (2)报文流经的路径，判断添加在哪个链上
        链：链上的规则次序，即为检查的次序，因此隐含一定的法则
            (1)同类规则(访问同一应用)，匹配范围小的放在上面
            (2)不同类规则(访问不同应用),匹配到报文频率较大的放上面：
            (3)可以由一条规则描述的多个规则合并为一个
            (4)设置默认策略：



        功能的优先级次序:raw --> mangle --> nat --> filter

      规则：
        组成部分：报文匹配条件，匹配到之后处理动作
            匹配条件：根据协议报文特征指定匹配条件
                基本匹配条件：
                扩展匹配条件：
            处理动作：
                内建处理机制
                自定义处理机制
            注意：报文不会经过自定义链，只能在内置链上通过规则引用后生效


      iptables:规则管理工具
        添加，修改，删除，显示等：

        规则和链有计数器：
            pkts:由规则或链所匹配到的报文的个数
            bytes:由规则或链路匹配到的所有报文的大小之和


      iptables命令：
		       iptables [-t table] {-A|-C|-D} chain  rule-specification
		
		       ip6tables [-t table] {-A|-C|-D} chain rule-specification
		
		       iptables [-t table] -I chain [rulenum]  rule-specification
		
		       iptables  [-t table] -R chain rulenum rule-specification
		
		       iptables [-t table] -D chain rulenum
		
		       iptables [-t table] -S [chain [rulenum]]
		
		       iptables  [-t  table]  {-F|-L|-Z}  [chain  [rulenum]]
		       [options...]
		
		       iptables [-t table] -N chain
		
		       iptables [-t table] -X [chain]
		
		       iptables [-t table] -P chain target
		
		       iptables [-t table] -E old-chain-name new-chain-name
		


               iptables [-t table](默认可以省，为filter) SUBCOMMAND  CHAIN CREITERIA  -j TARGET

               -t table :
                    filter,nat ,mangle,raw   

               链管理:
                    -F: flush,清空规则表,省略链，表示清空指定表上的所有链
                    -N:new,创建新的自定义规则链
                    -x:drop,删除用户自定义空的规则链
                    -Z:zero,清零，置零规则计数器
                    -P:policy:为指定链设定默认策略：默认策略通常有ACCEPT,DROP,REJECT
                    -E:rename,重命名自定义链:引用计数器不为0的自定义，无法改名，也无法删除
               规则管理：
                    -A:append，将新的规则加于指定链的尾部
                    -I:insert,将新规则插入指定链的指定位置
                    -D:delete,删除指定链上的指定规则
                        两种指定方式;
                            (1)指定匹配条件
                            (2)指定规则编号：
                    -R:replace,替换指定链上的指定规则
                 查看:
                    -L:list 列出指定链的所有规则
                        -n:numeric,以数字格式显示地址和端口号码
                        -v:verbose显示详细信息
                            -vv
                        --line-numbers:显示规则编号
                        -x:excatly 显示计数器计数结果精确值

                    iptables -X自动清除用户自定义的链，并且引用数组为0
                    ipatbles -t filer -L -n
                    iptables -t filter -N IN_
                    systremctl restart firewalld.service    
                    iptables -L -n 
              匹配条件
                基本匹配:
                    [!]-s,--src,--source IP|Netaddr,检查报文的地址是否符合此处指定的地址范围
                    [!]-d,--dst,--destination IP|Netaddr:检查报文中源ip地址是否符合此处指定的地址范围
                    -p  --protocal {tcp|udp|icmp}:检查报文中的报文协议，即ip首部中的protocal所标识的协议
                    -i,--in-interface IFACE:数据报文的流入接口：仅能用于PREROUTING,INPUT,及FORWARD链上
                    -o,--out-interface:数据报文的流出接口仅能用于FORWARD，OUTPUT,及POSTROUTING上
                扩展匹配：-m match_name --spec_options
                        例如：-m tcp --dport 22 使用tcp扩展匹配22号端口
                    隐式扩展： 对-p protocal 指明的协议进行的扩展,可以省略-m
                        -p tcp
                            --dport PORT[-PORT] :目标端口匹配,可以是单个也可以是连续端口
                            --sport PORT[-PORT] 
                            --tcp0-flags LIST1 LIST2:检查LST1所指明的所有标志位，且这其中LST2所表示出的所有标记位必须为1
                                SYN,ACK,FIN,RST,PSH,URG

                                --tcp-flags SYN,ACK,FIN,RST SYN  //tcp请求建立时的第一次
                            --syn:检查是否为新建tcp连接时的第一次请求

                         -p udp
                            --dport 
                            --sport

                         -p icmp
                            --icmp-type
                                可以用数字表示类型
                                    0:echo
                                    8:Ping请求
                            iptables -A OUTPUT -s 172.16.100.9 -p icmp --icmp-type 8 -j ACCEPT
                            iptables -A INPUT -d 172.16.100.9 -p icmp --icmp-type 0 -j ACCEPT
                    显式扩展： 必须使用-m选项指定使用的扩展模块(rpm -ql iptables | grep "[:[lower]:]\.so$")
                            CentOS 6:man iptables
                            CentOS 7:man iptables-extensions
                     1,muiltiport扩展   
                        以离散方式定义多端口匹配，最多指定15个端口  
                        --source-ports,--sports port[,port |,port:port]...指明多个离散的源端口
                        --destination-ports,--sports port[,port |,port:port]...指明多个离散的目标端口
                        --ports port[,port | ,port:port]...
                                

                                iptables -I INPUT -s 172.16.0.0/16 -d 172.16.100.9 -p tcp -m multiport -dport 22,80 -j ACCEPT
                                iptables -I OUTPUT -d 172.16.0.0/16 -d 172.16.100.9 -p tcp -m multiport -dport 22,80 -j ACCEPT
                                iptables -L -n -v 
                                iptables -D OUPUT 2
                                iptables -D INPUT 2

                      2,iprange扩展
                        指明连续的(但一般不能扩展为整个网络)ip地址范围时使用
                            --src-range from[-to] 指明连续的源ip地址范围
                            --dst-range from[-to] 指明连续的目标ip地址范围
                                iptables -I INPUT   -d 172.16.100.9 -p tcp -m multiport --dports 22:23,80 -m iprange --src  range 172.16.100.1-172.16.100.120 -j ACCEPT
                                iptables -I OUTPUT   -s 172.16.100.9 -p tcp -m multiport --sports 22:23,80 -m iprange --dst  range 172.16.100.1-172.16.100.120 -j ACCEPT
                      3,string扩展
                        检查报文中出现的字符串
                            
                            --algo  {bm |kmp }

                            --from
                            --to
                            [!]--string pattern 
                            [!]--hex-string pattern
                                同类规则中匹配度小的规则放在上
                                iptables -I OUTPUT -m string --algo bm --string 'movie' -j REJECT
                      4,time扩展
                        根据报文的到达时间和指定时间范围进行匹配
                            --datestart 
                            --datestop

                            --timestart
                            --timestop

                            --monthdays 1-31
                            --weekdays 1-7 
                                   iptables -I INPUT -d 172.16.100.9 -p tcp --dport 80 -m time --timestart 14:00 --timestop 16:00 -j DROP
                                   iptables -D INPUT
                                   iptables -I INPUt -d 172.16.100.9 -p tcp -dport 80 -m time --timestart 0:00 --timestop 23:59
                       5,connlimit
                        根据每个客户端ip(也可以是地址块)做并发连接数数量匹配
                        --connlimit above n 连接数量大于n，超过连接数
                        --connlimit-mask prefix length
                        --connlimit-upto n  连接的数量小于等于n

                            iptables -i INPUT -p tcp --dport 22 -m conlimit --connlimit-above 3 -j REJECT
                        6,limit扩展
                            基于发报文的速率做检查：
                            令牌过滤器，

                            --limit rate[/second | /minute| /hour |/day]
                            --limit-burst number

                        7,state扩展
                            根据连接追踪机制检查连接间的关系 iptables在内核内存空间连接记录和倒计时的计时器
                            --state state;


                            调整连接追踪功能所能连接的最大数量  
                                /proc/sys/net/nf_conntrack_max

                            已经追踪到并记录的连接
                                /proc/net/nf_contrack

                            不同协议或连接类型的时长属性
                                /proc/sys/net/netfilter

                            可追踪的连接状态
                                NEW:新发出的请求，连接追踪模板中不存在此连接相关的信息条目，因此，将其识别为第一次发出的请求
                                ESTABLISH:NEW 状态之后，连接追踪模板中为其建立的条目失效之前期间内进行的通信的状态，
                                RELATED:相关连接:如ftp协议中的命令连接与数据连接间关系
                                INVALID:无法识别的连接;
                            --state state1,state2,...
                                    iptables -I INPUT -d 172.16.100.9 -p tcp--dport 22 -m state --state NEW ESTALISHED -j ACCEPT 
                                    iptables -I OUTPUT -s 172.16.100.9 -p tcp--dport 22 -m state --state ESTALISHED -j ACCEPT 
                                    iptables -D INPUT 2
                                    iptables -D OUTPUT 2
                                    iptables -I INPUT -d 172.16.100.9 -p tcp--dport 80 -m state --state NEW ESTALISHED -j ACCEPT 
                                    iptables -I OUTPUT -s 172.16.100.9 -p tcp--dport 80 -m state --state ESTALISHED -j ACCEPT 
                                    iptables -A INPUT -d 172.16.100.9 -p icmp --icmp-type 8 -m state --state NEW,ESTABLISH -j ACCEPT
                                    iptables -I OUTPUT -s 172.16.100.9 -p icmp -m state --state ESTALISHED -j ACCEPT 
                                    iptables -I OUTPUT -m state ESTABLISH -j ACCEPT 默认为drop  
                                    
                                    iptables -I INPUT -m state ESTABLISIH -j ACCEPT
                                    iptables -I INPUT 2 -d 172.16.100.9 -m multiport --dports 22,80 -m state NEW -j ACCEPT
                                    

                                ipatables -A INPUT -d 172.126.100.9 -p icmp --icmp-type 8 -m limit --limit-burst 5 --limit 30/minute -j ACCEPT
                                iptables -A OUTPUT -s 172.16.100.9 -p icmp -j ACCEPT


                        iptables -I INPUT -d 172.16.100.9 -p tcp --dport 22 -j ACCEPT   
                        iptables -I OUTPUT -s 172.16.100.9 -p tcp --sport 22 -j ACCEPT
                        iptables -L -v

                            开放被动模式下的ftp服务
                                
                                (1)装载ftp追踪时候专用模块:
                                    /lib/modules/version/kernel/net/netfilter/nf_conntrack_ftp.ko
                                    #modprobe nf_conntrack_ftp   
                                 (2)放行请求报文
                                    命令连接：NEW,ESTABLISHED,
                                    数据连接：RELATED，ESTABLISHED 对数据连接的第一次请求为related,后续请求为established
                                    #iptables -A INPUT -d localIP -p tcp --dport 21 -m state --state NEW,ESTABLISHED -j ACCEPT
                                    #iptables -A INPUT -d localIP -p tcp -m state RELATED,ESTABLISHED -j ACCEPT
                                 (3)放行响应报文
                                    ESTABLISHED
                                    #iptables -A OUTPUT -s localhost -p tcp -m state --state ESTABLISHED -j ACCEPT


                                        步骤:
                                        1)安装vsftpd
                                        mount -t iso9600 -r /dev/cdrom /media/cdrom
                                        ls /media/cdrom 
                                        cd /etc/yum.repo
                                        yum clean all 
                                        yum install vsftpd
                                        ls /var/ftp
                                        cp /etc/issue /var/ftp/pub
                                        ls -l /var/ftp/pub
                                        systemctl start vsftpd.service
                                        ss -tnl
                                        iptables-save > /root/iptables.1 保存原来的iptables命令
                                        iptables -P INPUT ACCEPT
                                        iptables -P OUTPUT ACCEPT
                                        iptables -P FORWARDINPUT ACCEPT
                                        iptables -F
                                        ipatbles-restore < /root/iptables.1重新装载原来的iptables命令
                                        modprobe nf_conntrack_ftp
                                        lsmod |grep ftp
                                        iptables -R INPUT 2 -d 172.16.100.9 -p tcp -m multiport --dports 21,22,80 -m state --state NEW -j ACCEPT
                                        iptables -R INPUT 1 -m state --state ESTABLISHED,RELATED -j ACCEPT
                                        /etc/sysconfig/iptables-config中定义开机挂载的模块


                       如何保存及重载规则
                            保存规则至指定文件:
                                iptables-save > /PATH/TO/SOMEFILE

                            从指定文件重载规则:
                                iptables-restore < /PATH/FROM/SOMEFILE

                            CentOS 6:
                                service iptables save
                                    iptables-save > /etc/sysconfig/iptables

                                service iptables restart 
                                    iptables-restore < /etc/sysconfig/iptabls
                            CentOS 7:
                                引入新的iptables 前端管理管理工具:firewalld
                                    firewalld-cmd
                                    firewalld-config


                                    systemctl disable firewalld.service 禁用firewalld服务
                                    systemctl stop firewalld.service

                                    systemctl list-unit-files service //查看所有的unit文件
                                    systemctl start iptables.service
                                相关连接：
                                    http://www.ibm.com/developerworks/cn/linux/1507
                                    


                                实现网络防火墙
                                          一部机上有两块网卡
                                           内网---->网关


                                           网关 192.169.20.1 / 172.168.100.9
                                                ip addr 192.168.20.1/24 dev eno33554992
                                                ifconfig eno33554992 192.168.20.1/24
                                                nmcli conn
                                                ip addr list 
                                                ping 172.16.100.1 
                                                cat /proc/sys/net/ipv4/ip_forward//查看转发功能是否打开
                                                sysctl -w net.ipv4.ip_forward=1//打开内核转发功能(暂时生效)
                                                
                                                cat /proc/sys/net/ipv4/ip_forward//查看转发功能是否打开此时内容为1则表示成功打开转发功能 
                                                开启转发后依然无法直接ping通外网主机,缺少相关的路由表项
                                                curl http://192.168.20.2
                                                iptables -P FORWARD DROP
                                                iptables -A FORWARD -d 192.168.20.2 -p tcp -dport 80 -j ACCEPT //开放httpd服务
                                                iptables -A FORWARD -s 192.168.20.2 -p tcp -sport 80 -j ACCEPT
                                                iptables -F FORWARD
                                                iptables -A FORWARD -m state ESTABLISHED -j ACCEPT
                                                iptables -A FORWARD -d 192.168.20.2 -p tcp -m multiport 22,80 -m state --state NEW -j ACCEPT  //实现可以访问ssh
                                                iptables -L -n -v
                                                ftp 192.168.20.2//ftp访问服务正常
                                                modprobe nf_conntrack_ftp
                                                iptables -R FORWARD 1 -m state --state ESTABLISHE,RELATED -j ACCEPT
                                                iptables -R FORWARD 2 -d 192.160.20.2 -p tcp -m multiport --dports 21,22,80 -m --state NEW -j ACCEPT
                                                练习：主机防火墙
                                                        放行telnet,ftp,web服务
                                                        telnet: 23/tcp 

                                                        放行samba服务
                                                        samba:137,138/udp 445/tcp

                                                        放行dns服务(查询和区域传送):
                                                        dns: INPUT:53/udp OUTPUT:53/udp


                                                        核心转发:/proc/sys/net/ipv4/ip_forward
                                                            /etc/sysct.conf
                                                            net.ipv4.ip_forward



                                           内网主机192.168.20.2
                                                ifconfig eth0 192.168.20.2/24
                                                route -n
                                                route add default gw 192.168.20.1
                                                service httpd start
                                                vim /var/www/html/index.html
                                                        
                                                        <h1>Test page on internal server </h1>


                                           外网主机172.16.100.12
                                                route add -net 192.168.20.0/24 gw 172.16.100.9
                                                route -n
                                                curl http://192.168.20.2/
                                                访问内部网页成功
                                                挂载cdrom 
                                                mount /dev/cdrom /media/
                                                cd /media/packages
                                                rpm -ivh httpd
                                                service vsftpd start
                                                cp /etc/fstab   /var/ftp/pub




                                                

                                               

                                           










                                


                        


                                getenforce 
                                setenforce 0
                                关闭selinux将配置文件 /etc/selinux/config中的selinux=enforcing改为permissive 

                     



     目标:
			-j TARGET:jump至于指定的TARGET
			ACCEPT:
			DROP:丢弃
			REJECT:返回调用链
			REDIRECT:端口重定向
			LOG:记录日志
			MARK:做防火墙标记   
			DNAT:目标地址转换
			SNAT:源地址转换
			MASQUERADE:地址伪装
                        ...
                        自定义链:


                 iptables -t filter -A INPUT -d 172.16.100.9 -p tcp -j ACCEPT 所有的tcp协议都可以放行
                 iptables -t filter -A OUTPUT -s 172.16.100.9 -p tcp -j ACCEPT
                 iptables -P INPUT DROP
                 iptables -P OUTPUT DROP
                 iptables -P FORWARD DROP

                 iptables -L -n -v && sleep 5 && iptables -F
                 iptables -A INPUT -d 172.16.100.9 -p icmp -j ACCEPT
                 iptables -A OUTPUT -s 172.16.100.9 -p icmp -j ACCEPT

                 iptables -L -n --line-numbers
                 iptables -D INPUT 2
                 iptables -D OUTPUT 2
                 iptables -A INPUT -d 172.16.100.9 -i eth0 -j ACCEPT
                 iptables -A OUPUT -s 172.16.100.9 -o eth0 -j ACCEPT
                 iptables -L -n --line-numbers -v








    数据包过滤匹配流程
                            
                                本机应用进程       raw: OUTPUT
                                                 mangle:
                                                    nat:
                                mangle:INPUT     filter:
                                filter:INPUT
                                
        raw:       PRETOUTING       路
        mangle:                     由
        nat：                       选
                                    择




回顾：
    iptables/netfilter
        netfilter:kernel framework,
        iptables:

        四表：filter,nat,mangle,raw
        五链：PREROUTING ,INPUT,FORWARD,OUTPUT,POSTROUTING


    iptables:
        子命令：
            链:-F,-X,-N,-E,-Z,-P,-L
            规则:-A,-I,-D,-R

        -j TARGET:
            ACCEPT,DROP,REJECT,REETURN,LOG,MARK,DNAT,SNAT,MASQUARDE,...
        匹配标准：
            通用匹配：-s,-d,-p,-i,-o
            扩展匹配：
                隐含扩展
                    -p tcp : --dport,--sport,--tcp-flags,--syn(--tcp-flags SYN,ACK,FIN,RST SYN)
                    -p udp: --dport,--sport
                    -p icmp:--icmp-type
                显示扩展:-m
                    multiport ,iprange ,string,time,connlimit,limit,state
                        state:
                            /proc/net/nf_conntrack
                            /proc/sys/net/nf_conntrack_max
                            NEW,ESTABLISHED,RELATED,INVALID
                            
            iptables:
                nat:安全性,Network Address Tansmission 网络层+应用层
                    SNAT:针对于请求报文，只修改请求报文的源地址
                    DNAT:只修改是请求报文的目标地址
                proxy:代理,应用层
                nat表：
                    PREROUTNG:DNAT
                    OUTPUT
                    POSTROUTINGA:SNAT

                client         gateway          server
                应用层           应用层           应用层                   
                网络层             x              网络层
                传输层             x              传输层
                物理层-------------x------------  物理层
                nat


                client         gateway          server
                应用层             x             应用层                   
                网络层             x
                传输层             x
                物理层-------------x------------
                proxy 

            client  192.168.20.2
               ifconfig eth0 192.168.20.2 
               route add default gw 192.168.20.1
               route -n 
               curl http://172.16.100.12
               vim /etc/httpd/conf/httpd
                    Listen 8080
               service httpd restart
               ss -tnl 


            gateway 192.168.20.1/172.16.100.9 
                ifconfig  eh1 192.168.20.1
                vim /etc/sysctl.d/99-sysctl.conf
                    net.ipv4.forward = 1
                cat /proc/sys/net/ipv4/ip_forward
                ipatables -L -n
                cd /etc/sysconfig/network-scripts/ 
                //为相应的网卡创建相应的文本
                cp ifcfg-eno1 ifcfg-eno2
                    修改NAME 
                        DEVICE 
                        IPADDER=192.168.20.1
                        删除网关，dns选项 
                systemctl  restart network.service
                iptables -t nat -A POSTROUTING -s 192.168.20.0/24 -d ! 192.168.20.0/24  -j SNAT --to-source 172.16.100.9//将所有内网主机的请求源地址全部转换为172.16.100.9
                iptables -t nat -A PREROUTING -d 172.16.100.9 -p tcp --dport
 80 -j DNAT --to-destination 192.168.20.2:80//将访问外网主机的web服务通过网关转发
                iptables -t nat -A PREROUTING -d 172.16.100.9 -p tcp --dport 22 -j DNAT --to-destination 192.168.20.2:22//将访问内网主机的ssh服务转换为连接内网
                iptables -t nat -R PREROUTING -d 172.16.100.9 -p tcp --dport 80 -j DNAT --to-destination 192.168.20.2:8080//实现端口映射
                iptables -t nat -A PREROUTING ! -d 192.168.20.0/24 -j MASQUERADE  
            

            源地址转换：iptables -t nat -A POSTROUTING -s localNet !-d localNET (-p tcp) -j SNAT --to-source ExternalIP 
                        iptables -t nat -A POSTROUTING -s localNet !-d localNET (-p tcp) -j MASQUERADE 地址伪装
            目标地址转换:iptables -t nat -A PREROUTING -d ExIP -p (tcp|udp) -j DNAT --to-destination InterServerIP[:PORT]

             remote host 172.16.100.12
               service httpd start
               vim /var/www/html/index.html
                    <html>
                            <title>Test Page</title>
                            <body>
                                <h1>Welcome to MAgedu</h1>
                                <p>hello</p>
                            </body>
                    </html>

                //抓包分析
                tcpdump -i eth0 host 172.16.100.12
                //分析得出在收到192.168.20.2的请求后，172.16.100.12将响应报文发送至于自身网关，172.16.0.0则无法响应本地主机请求
                route add -net 192.168.20.0/24 gw 172.16.100.9//增加路由

                iptables的链跟踪的最大容量为/proc/sys/net/ipv4/ip(nf)_conntrack_max 链接碰到各种状态的超时后就会从表中删除

                解决方法有：
                (1)加大ip_conntrack_max值
                /etc/sysstcl.conf
                net.ipv4.ip_conntrack_max= 393216
                net.ipv4.netfilter.ip_conntrack_max =393216 
                (2)降低ip_conntrack timeout时间
                /etc/systemctl.conf
                net.ipv4.etfilter.ip_conntrack_tcp_timeout_established = 300
                net.ipv4.netfilter.ip_conntrack_tcp_timeout_wait = 120
                net.ipv4.netfilter.ip_conntrack_tcp_timeout_close_wait = 60
                net.ipv4.netfilter.ip_conntrack_tcp_timeout_close_wait = 120

                iptables -t nat -L -n


                iptables  -N clean_in
                iptables  -A clean_in -d 255.255.255.255 -p icmp -j DROP//禁止广播ping 
                iptables  -A clean_in -d 172.16.255.255 -p icmp -j DROP

                创建自定义链clean_in,禁止两种ping操作

                iptables -A clean_in -p tcp ! --syn -m state --state NEW -j DROP//drop非法包
                iptables -A clean_in -p tcp --tcp-flags ALL ALL -j DROP
                iptables -A clean_in -p tcp --tcp-flags ALL NONE -j DROP
                iptables -A clean_in -d 172.16.100.7 -j RESTURN


                iptables -A INPUT -d 172.16.100.7 -j clean_in
                iptables -A INPUT -i lo//本地回环 -j ACCEPT
                iptables -A OUTPUT -o lo//本地回环 -j ACCEPT

                iptables -A INPUT -i eth0 -m multiport -p tcp --dports 53,113,113,135,137,139,445 -j DROP 
                iptables -A INPUT -i eth0 -m multiport -p udp --dports 53,113,113,135,137,139,445 -j DROP 
                ipatables -A INPUT -i eth0 -m multiport -p tcp --dports 1433,4899 -j DROP
                iptables -A INPUT -p icmp -m limit --limits 10/second -j ACCEPT

          tcp_wrapper:  tcp包装器
            实现访问控制工具，对基于tcp开发并提供服务应用程序,提供的一层访问控制工具
            基于库调用实现功能：
                libwrap
            判断服务是否能够由tcp_wrapper进行访问控制
                (1)动态编译:ldd命令
                    ldd `which program_name`
                (2)静态编译:strings命令查看应用程序文件，其结果中出现
                    hosts.allow
                    hosts.deny
                    标明支持tcp_wrapper



                在配置文件中为各服务分别定义访问控制规则实现访问控制:
                    /etc/hosts.allow 
                    /etc/hosts.deny

                    配置文件语法：
                        daemon_list: client_list [:options:]

                                   Y:allow
                    hosts.allow  ------>
                        |
                        |
                        V           Y:deny
                     hosts.deny  ------>
                        |
                        |默认策略 N:allow
                        V

                        daemon_list:
                            应用程序的文件名称，而非服务名：
                            应用程序文件名称列表，彼此之间使用逗号空开：
                                例如：sshd,vsftpd   
                                    ALL表示所有服务：

                        client_list :
                            IP地址：
                            主机名字 ：
                            网络地址：必须是使用完整格式的掩码，不使用前缀格式掩码,类似于172.16.0.0/16不合法：
                            简短格式的网络地址：如172.16表示 172.16.0.0/255.255.255
                            ALL:所有主机
                            KNOWN：所有可以解析主机名的主机
                            UNKONWN:所有不可以解析主机名的主机
                            EXCEPT:除了
                                hosts.allow
                                    vsftpd: 172.16. EXCEPT 172.16.100.0/255.255.255.0 EXCEPT 172.16.100.1
                            PARANOID:正解与反解不相等

                        [:options:]
                            deny:拒绝，主要用于hosts.allow中，
                            allow：允许，主要用于hosts.deny中
                            spawn:启动额外应用程序，完成一部分服务

                            hosts.allow 
                                vsftpd: 172.16 EXCEPT 172.16.100.9 :deny 不匹配172.16.100.9，对于其是否通信需要查看hosts.deny中的定义

                            hosts.deny
                            vsftpd: ALL :spawn /bin/echo `date` login attempt from %c to %s,%d >> /var/log/vsftpd.deny.log //记录非法登录
                                %c :client ip
                                %s :server ip
                                %d :daemon name





                                使得ip地址无法访问ftp
                                    systemctl  start vsftpd.service
                                    vim /etc/hosts.deny
                                       vsftpd: ip_addr 
                                控制telnet  CentOS 6
                                    yum install telnet-server
                                    rpm -ql telnet-server
                                        /usr/sbin/in.telnetd

                                    vim /etc/xinet.d/telnet
                                        disable = no
                                    vim /etc/hosts.allow
                                        in.telnetd:ip_addr
                                    vim /etc/hosts.deny
                                        in.telnetd:ALL
                                    ///etc/host.deny
                                        vsftpd: ALL EXCEPT 172.16.
                                        


                






                                                






            
