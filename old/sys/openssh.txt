dns:
    bind: 53/udp,53/tcp,
    named,named:named
        1023以管理员身份启动，再切换到named进行运行     
   服务脚本：/etc/rc.d/init.d/named
   配置文件：/etc/named.conf,/etc/rndc.conf
   测试工具：dig，host,nslookup

   角色：
        缓存服务器：提供递归服务
        主dns服务器
        从dns服务器
        转发服务器
            
        zone "ZONE_NAME" IN
        {
                type {hint |master |slaves| forward};
                file "FILE_NAME";
        };


       资源记录：
        SOA,NS,MX,CNAME
        A,AAAA,PTR,

       view:
        




OpenSSH:


    telnet:     23/tcp

    yum list all telnet*
    chkconfig telnet on ==> systemctl enable telnet.socket
    service xinetd  restart 
    ss -tnl
    xinetd:超级守护进程


    ssh协议版本：
        v1:基于crc-32作MAC（消息验证码），不安全：man-in-middle 
        v2:基于双方主机协商选择安全的mac方式
            基于DH算法做密钥交换，基于RSA或者DSA实现身法认证
            两种方式的用户登录认证：
                基于password
                基于key



        OpenSSH:
            C/S
                C:ssh,scp,sftp
                    Window客户端：
                        Xshell,puptty,securecrt,sshsecureshellclient    
                S:sshd

           客户端组件：
                ssh,配置文件,/etc/ssh/ssh_config

                格式：ssh [user@]host [COMMAND]
                      ssh -l user host [COMMAND]
                        -p port:远程服务器的监听端口：
                        -X:支持信任的x11转发
                        -Y:支持信任的x11转发
                      
                      Host PETTERN
                            PARAMETER VALUE     


                      基于密钥的认证：
                        (1)在客户端生成密钥对
                            ssh-keygen -t rsa [-P ''] [-f '~/.ssh/id_rsa']
                        (2)把公钥传输至用户的家目录
                        ssh-copy-id -i .ssh/id_rsa.pub  user@IP
                        远程authorized_keys保存了公钥
                        (3)测试

                scp命令：
                    scp [OPTIONS]   SRC...DEST/

                    存在两种情形：
                        PULL:scp [OPTIONS] [user@]host:/PATH/FROM/SONFILE /PATH/TO/SOMEWHERE
                        push:scp [OPTIONS] [user@]host:/PATH/TO/SOMWHERE 

                            常用选项：
                                -r:递归复制;
                                -p:保持原文件的属性信息：
                                -q:静默模式
                                -p PORT:指明remote host的监听端口
                     sftp命令：
                        sftp [user@]host:
                        sftp> help




           服务器端口：
                sshd，配置文件：/etc/ssh/sshd_config

               常用参数：
                    port 22022 
                    Listen ip(内网地址)
                    
                    ListenAddress 0.0.0.0表示监听本机所有的端口(ipv4)
                    ListenAddress ::表示监听本机所有的端口(ipv6)
                    LoginGraceTime  登录的宽限时长
                    PermitRootLogin 是否允许管理员直接登录
                    StrictMode 
                    MaxAuthTries最大认证次数
                    MaxSessions最大会话数目
                    RSAAuthentication是否支持RSA认证
                    Pubkeyauthentication支持公钥认证
                    AuthorizedKeyFile公钥放置的位置
                    PasswordAuthentication是否允许基于密码认证
                    UseDNS 是否进行dns的反向解析,默认为yes
                    Kerberos专门的服务器进行统一认证机制
                    默认不支持
                    Subsystem   sftp    
                    (允许使用sftp)


                    CentOS7 selinux 不允许程序监听不属于本身的端口
                    在修改了port后      
                    getenforce 查看是否开启selinux
                    setenforce 0关闭selinux
                    systemctl restart sshd.service
                    ss -tnl     
                    

                    限制可以登录的用户：
                        AllowUsers user1 user2  user3
                        AllowGroups


                    tail /var/log/secure

    ssh: secure shell,protocal 22/tcp 安全的远程登录
    Openssh:  ssh协议的开源实现,
        dropbear:开源实现
        mingetty-->login    

ssh服务的最佳实践
    1,不要使用默认端口
    2,禁止使用协议protocal version 1
    3,限制可登录的用户
    4,设定空闲会话超时时长
    5,利用防火墙设置
    6,仅监听特定的ip地址
    7,基于口令认证的时候，使用强密码策略

    tr -dc A-Za-z0-9_ < /dev/urandom |head -c 30 |xagrgs    
    8,使用基于密钥的认证，
    9,禁止使用空密码
    10,禁止使用root用户直接登录
    11,限制ssh的访问频度和同并发在线数
    12,做好日志,经常分析

ssh协议的另外一个实现：dropbear

    (1)dropbearkey -t rsa -f /etc/dropbear/dropbear_rsa_host_key -s 2048
    dropbearkey -t dss -f /etc/dropbear/dropbear_dss_host_key 
    dropbear -p [ip:]port -F -E
    


    yum grouplist查看已经安装了的开发包
    yum groupinstall "Development Tools" "Server Platform Development"
    tar xf 
    ./confirgure    
    make PROGRAMS= "dropbear scp dbclient dropbearkey"
    make PROGRAMS= "dropbear scp dbclient dropbearkey"install 
    /usr/local/bin下为服务器端程序
    /usr/local/sbin下为服务器端程序
    mkdir /etc/dropbear
    dropbearkey -t rsa -f /etc/dropbear/dropbear_rsa_host_key -s 2048
    dropbearkey -t dss -f /etc/dropbear/dropbear_dss_host_key -s 2048
    dropbear -p :2202 -F 

OpenSSl:
    三个组件：
        openssl:多用途的命令行工具：
        libcrypto:加密解析库
        libssl:ssl协议的实现

    PKI:Public Key Infrastructure 
        CA:
        RA:
        CRL:
        证书存取库

    建立私有的CA:
        OpenCA:
        Openssl:



    
    证书申请以及签署步骤:
        (1)生成注册请求：
        (2)RA核验：
        (3)CA签署
        (4)获取证书

   创建私有ca:
    openssl的配置文件：/etc/pki/tls/openssl.cnf
        HOME  家目录
        RANDFILE 随机数生成器的位置

        default_ca 文件中配置ca默认选项的段落
        $dir= /etc/pki/CA
        certs 证书的存储位置 $dir/cert
        crl_dir 证书吊销列表 
        database 数据库的索引文件
        unique subject
        new_certs-dir 刚刚签署的证书放置的位置  
        certificate CA的证书
        default_days 证书的有效期限
        default_crl_days 吊销证书的有效期限
    (1)创建所需要的文件
        touch index.txt 
        echo 01 >serial 

    (2)CA自签证书
        #(umask:077: openssl genrsa  -out private/cakey.pem 2048 )
        #openssl req -new -x509(实现自签)  -key    /etc/pki/CA/private/cakey.pem   -days 7300 -out cacert.pem
            -new:生成新证书签署请求 
            -x509:专用于CA生成自签证书 
            -key:生成请求时候用到的私钥文件
            -days n证书的有效期限
            -out /PATH/TO/SOMECERTFILE:证书的保存路径
    (3)发证：
       (a)用到的主机生成证书请求： 
            #(umask 077;openssl genrsa -out /etc/httpd/ssl/http.key 2048)
            #openssl req -new -key /etc/httpd/ssl/http.key -days 365 -out /etc/httpd/ssl/httpd.csr
       (b)把请求文件传输到CA
        
       (c)CA签署证书 
            #openssl ca -in /tmp/httpd.csr -out /etc/pki/CA/certs/httpd.crt -days 365 
            查看证书中的信息：
                openssl x509 -in /PATH/FROM/CERT_FILE -noout -text|-subject|-serial 
     (4)吊销证书：
        (a)获取要吊销证书的serial 
            openssl x509 -in /PATH/FROM/CERT_FILE -noout -serial 
        (b)CA
            先根据客户端提交的serial 和subject信息，对比检验是否与index.txt文件中的信息一致：
            吊销证书：
                openssl ca -revoke /etc/pki/CA/newcerts/SERIAL.pem
        (c)生成吊销证书的编号(第一次吊销某证书)
            echo 01 >/etc/pki/CA/crlnumber

        (d)更新证书的吊销列表：
            openssl ca -gencrl  -out thisca.crl 

            查看crl文件
                openssl crl -in /PATH/FROM/CRL_FILE.crl -noout -text

        
    

    



    

