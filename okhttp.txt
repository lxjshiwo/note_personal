
支持链接同一地址共享一个socket
透明Gzip 
okhttp  
okio


1.3okhttp主要功能
    1.联网请求文本
    2.大文件下载
    3.大文件上传
    4.请求图片


简单的get请求实例
        //使用Response response = client.newCall(request).execute()
        //将会阻塞相应的UI线程
        //使用Response response = client.newCall(request).enqueue(new
        CallBack())


        
        OkHttpClient client = new OkHttpClient();


    	okhttp3.Request request = new okhttp3.Request.Builder().url(REQUEST_URL).build();
    	client.newCall(request).enqueue(new Callback() {
			
			@Override
			public void onResponse(Call arg0, Response arg1) throws IOException {
				// TODO Auto-generated method stub
				String result = arg1.body().string();
				Log.e("MainActivity","成功"+result);
				System.out.println("成功");
				
				if(arg1.body() != null)
				{
					arg1.body().close();
				}
				
			}
			
			@Override
			public void onFailure(Call arg0, IOException arg1) {
				// TODO Auto-generated method stub
				Log.e("MainAcivity","失败-----"+arg1.getLocalizedMessage());
				System.out.println("失败");
				
			}
		});
    
    http协议没状态
        解决方法:Cookie机制

    if(arg1.isSuccessful())//arg1.code() == 200  相同
				{
					//包括 isRedirect
					//请求成功
					String json = arg1.body().string();
					showuser(json);
					
				}
架构分析     
    同步请求
        newCall
        
    异步请求
        client.newCall(request).enqueue(new Callback(){
                public void onFailure()
                public void onResponse
                })


    指定自定义请求头信息
     OkHttpCient client  = new OkHttpClient();
     Request request = new
     Request.Builder().url("http://imooc.com").addHeader("User-Agent","from nate http").build();

     Response reponse = client.newCall(request).execute();
     if(reponse.isSuccessfunl())
     {
             Headers headers  = reponse.headers();
             for(int i = 0;i < headers.size();i++)
             {
                System.out.println(headers.name(i)+":"+headers.value(i));
             }
     }



     Accept, text/plain text/html 指定用户端获取数据类型


Post请求方法
    post请求需要使用相应的表单
    FormBody 继承RequestBody
    FormBody body = new FormBody.Builder().add("key","value")....biuld();
    new Request.Builder().url().post(body).build()
    当传输相应的非英文内容时候需要使用addEncoded(name,value)增加相应的编码方法
    post 
        application/x-www-form-urlencoded 
            在发送前编码所有字符
            空格转换为"+"加号，特殊符号转换为ASCII HEX值
        multipart/form-data
            不对字符编码、在使用包含文件上传空间的表单时必须使用该值


文件上传
    
    Part part = request.getPart('filename');
    PrintWriter out = response.getWriter();
    out.print("ContentType"+part.getContentType()+"\n");
    part.write(path); 


http的缓存处理


    1.请求缓存
        Etag
        Last-Modified
        

        Expires
            指定一个缓存的失效时间
            绝对时间格雷明顿时间
        Cache-Control
            使用相对值
            no-cache
                无缓存指令
            max-age
                如果缓存只是用来和服务器做校验
                指定时间和参数
            only-if-cached
                只用到客户端本地的缓存，有时你会想显示可以立即一些东西，重定向reque
            max-stale
                有时候过期的reponse比没有reponse更好，设置最长过期时间来允许
                指定时效的失效时间
        Last-Modified
            记录当前文件最后一次修改的时间，判断客户端数据、服务端数据有无变化
        ETAG
            对整个的服务器返回的reponse做了一个编码处理 ，查看内容是否修改
        Date

        If-Modified-Since

           在请求中标示，客户端存取的该资源最后一次修改时间。使用Last-Modified事件支持
        If-None-Match
            指定Etag值

        Pragma

        服务器支持缓存才可以使用缓存机制

        new CacheControl.Builder()创建关于相应缓存的设置
            noCache()
                当前程序永远不使用缓存
            maxStale(time,TimeUnit.timeUnit)
                强制使用缓存的时间


OkHttp缓存相关类
    CacheIntercepter
        拦截请求
    CacheStrategy
        缓存策略器处理数据
    Cache
        缓存的刷新
        Cache类中实现
            internalCache
        InternalCache接口  
            包含
                remove
                update
                trackCOnditionalCacheHit
                trackResponse

    DiskLruCache
        

OkHttp多线程下载
    Transfer-Encoding:chunked
        客户端接收的传输编码格式
       
    content-length
        标示当前下载文件的总长度
        设置每个线程的下载长度
        针对静态文件可以获取content-length
    Range
        访问服务器中某个数据的指定长度



    多线程下载原理
        1.下载长度为100字节
        2.两个线程下载
            (1) 0-44
            (2) 45-99
        3.http请求参数是Range bytes = 0-44



    需要解决问题
        1.文件存储位置
        2.文件是否受损
            md5值校验
        3.文件空间大小是否足够
        4.进度条更新
        5.数据保存
        
        
    Accept-Encoding identify     
        服务器支持content-length则返回content-length
        不支持则指定无用



    代码编写
        1.准备工作
            log 工具类
            文件管理
            url加密
        2.线程池管理


线程池管理和任务队列
    线程池的实现原理
        减少线程的创建和申请
        ThreadPoolExecutor

                首先启动核心线程
                当核心线程数目满后，后续会往队列中提交数据，提交任务超过队列数目
                判断相应的最大线程数目，如果也超过最大线程数目将会抛出异常
                corePoolSize
                maximumPoolSize
                keepAliveTime
                    
                unit
                BlockingQueue
                    SynchronousQueue
                    LinkedBlockingDeque<Runnable>
                        没有队列数目的限制，将会导致资源的不断消耗 
                    ArrayBlockingQueue<Runnable>(opacity)
                        指定相应队列的数目


    队列
        所有任务在执行过程中按照先进先出的方式排列 
        避免系统出现一瞬间大量请求的问题 
            有限队列
                    SynchronousQueue
                        满足生产者消费者模式
                    ArrayBlockingQueue<Runnable>(opacity)
            无限队列
                    LinkedBlockingDeque<Runnable>

    阻塞队列
    终止线程
        1.使用一个runnable类内变量
        2.使用Thread.interrupted() 与 thread.interrupt()来进行操作,在
        printStackTrace()后执行return
        3.volatile保证变量在修改的时候立刻同步到关联程序中
        修改相应的变量 并发送interrupt指令 
        while(flag && !Thread.interrupted())
        {
                do something
        }
    注意事项
        
         




    



